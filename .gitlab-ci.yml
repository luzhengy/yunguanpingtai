variables:
  #以下两个是容器仓库地址，写死
  AWS_DTR_URL: "955466075186.dkr.ecr.cn-northwest-1.amazonaws.com.cn"
  PRIVATE_DTR_URL: ${AWS_DTR_URL}
  #组名, 示例是rd，根据实际修改
  TEAM: "ops"
  #服务类型，内部服务为s外服服务为w前端为f"
  PROJECT_TYPE: "s"
  #服务名 
  PROJECT_NAME: "pop-web"
  #健康检查端口
  HC_PORT: "80"
  
  #健康检查路径
  HC_HTTP_REQUEST_PATH: "/"
  #服务发布与更新后的健康检查延迟检测时间
  HC_PER_SEC: "0"
  ####### Health Check 检查方式 ############
  #默认health check 检查方式
  #服务存活默认走tcp端口检查，是否可以接受流量（就绪）走http协议检查
  
  #如果服务（存活&就绪）需要强制走 HTTP 进行健康检查，配置如下参数
  #PROTOCOL: "http"
  
  #如果服务（存活&就绪）需要强制走 TCP 端口进行健康检查，配置如下参数
  #PROTOCOL: "tcp"
  
  #如果服务（存活&就绪）需要强制走 Command 进行健康检查，配置如下参数
  #PROTOCOL: "exec"
  #HC_EXEC: "ps -ef | grep xxx" #检查命令

stages:
  - prepare
  - build
  - deploy

init:
  tags:
    - docker
    - aws
  stage: prepare
  when: manual
  only:
    - master
  script:
    - echo "init"
    - ops_deploy init

prepare_nodemodules:
  tags:
    - docker
    - aws
  stage: prepare
  image: 955466075186.dkr.ecr.cn-northwest-1.amazonaws.com.cn/base/node:14.20
  only:
    - master
  script:
    - echo "prepare_nodemodules"
    - npm install -g pnpm
    - pnpm install
    - pnpm build
  artifacts:
    name: "node_modules"
    paths:
      - $CI_PROJECT_DIR/

build:
  variables:
   BUILD_IMAGE: "$AWS_DTR_URL/$TEAM/$PROJECT_TYPE-$TEAM-$PROJECT_NAME:$CI_COMMIT_REF_NAME-$CI_PIPELINE_ID"
  tags:
    - docker
    - aws
  stage: build
  # when: manual
  only:
    - master
  script:
    - echo "build"
    - docker build -t $BUILD_IMAGE .
    - docker push $BUILD_IMAGE
  dependencies:
    - prepare_nodemodules

deploy_to_qa:
  tags:
    - docker
    - aws
  stage: deploy
  dependencies:
    - build
  # when: manual
  variables:
    ENV: qa
    REGION: cn-northwest-1
  only:
    - master
  script:
    - echo "deploy"
    - ops_deploy deploy